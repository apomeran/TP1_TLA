%{
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdbool.h>
#include <inttypes.h>
#include <assert.h> 
#include <ctype.h>

extern FILE * yyin;
extern FILE * yyout;
extern int yylineno;
FILE * outputFile = NULL;
char * aux_params = NULL;
%}

%union {
	char * strval;
}

%token LEFT_PARENTHESIS;
%token RIGHT_PARENTHESIS;
%token LEFT_BRACE;
%token RIGHT_BRACE;
%token COMMA;
%token EQUALS;
%token PLUS;

%token INTEGER;
%token CHAR;
%token FUNCTION;
%token EOL;
%token <strval> NAME;
%token <strval> VALUE;
%token <strval> INT_VALUE;
%token <strval> CHAR_VALUE;

%start PROGRAM
%type <strval> LINE;

%%
PROGRAM:	LINE;
LINE:		LINE LINE{}
		|
		INTEGER LEFT_PARENTHESIS NAME RIGHT_PARENTHESIS EQUALS INT_VALUE EOL
		{
			fprintf(outputFile,"int %s = %d;\n", $3, atoi($6));
		}
		|
		CHAR LEFT_PARENTHESIS NAME RIGHT_PARENTHESIS EQUALS CHAR_VALUE EOL
		{
			fprintf(outputFile,"char %s = %s;\n", $3, $6);
		}
		|
		INTEGER FUNCTION NAME LEFT_PARENTHESIS PARAMS RIGHT_PARENTHESIS LEFT_BRACE EOL
		{
			fprintf(outputFile,"int %s ( %s ) {\n", $3, aux_params);
			aux_params = NULL;
		}
		|
		CHAR FUNCTION NAME LEFT_PARENTHESIS PARAMS RIGHT_PARENTHESIS LEFT_BRACE EOL
		{
			fprintf(outputFile,"char %s ( %s ) {\n", $3, aux_params);
			aux_params = NULL;
		}
		|
		RIGHT_BRACE EOL {
			fprintf(outputFile,"}\n");
		}
		WHILE LEFT_PARENTHESIS EVAL RIGHT_PARENTHESIS LEFT_BRACE EOL
PARAMS:		PARAMS PARAMS {}
		|
		INTEGER NAME COMMA {
			if (aux_params == NULL)
				aux_params = malloc(80);
			aux_params = strcat(aux_params,"int ");
			aux_params = strcat(aux_params,$2);
			aux_params = strcat(aux_params,",");
 		}
		|
		CHAR NAME COMMA {
			if (aux_params == NULL)
				aux_params = malloc(80);
			aux_params = strcat(aux_params,"char ");
			aux_params = strcat(aux_params,$2);
			aux_params = strcat(aux_params,",");
		}
		|
		CHAR NAME {
			if (aux_params == NULL)
				aux_params = malloc(80);
			aux_params = strcat(aux_params,"char ");
			aux_params = strcat(aux_params,$2);
		}
		|
		INTEGER NAME {
			if (aux_params == NULL)
				aux_params = malloc(80);
			aux_params = strcat(aux_params,"int ");
			aux_params = strcat(aux_params,$2);
		};
%%


int yywrap() {
	return 1;
}

int main(int argc, char * argv[]) {
	char * outputFileName = "my_song";

	outputFile = fopen(outputFileName, "w");
	if ( outputFile == NULL ) {
		printf("Couldn't open output file\n");
		return 1;
	}
	yyparse();
	fclose(outputFile);
}
